--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,7 +1,16 @@
-cmake_minimum_required(VERSION 3.5)
+cmake_minimum_required(VERSION 3.1)
 
 project(flecs LANGUAGES C)
 
+option(FLECS_STATIC_LIBS "Build static flecs lib" ON)
+option(FLECS_PIC "Compile static flecs lib with position-independent-code (PIC)" ON)
+option(FLECS_SHARED_LIBS "Build shared flecs lib" ON)
+option(FLECS_DEVELOPER_WARNINGS "Enable more warnings" OFF)
+
+if(NOT FLECS_STATIC_LIBS AND NOT FLECS_SHARED_LIBS)
+    message(FATAL_ERROR "At least one of FLECS_STATIC_LIBS or FLECS_SHARED_LIBS options must be enabled")
+endif()
+
 # include utilities for compiler options and warnings
 
 include(cmake/target_default_compile_warnings.cmake)
@@ -82,35 +91,62 @@ set(SRC
         src/vector.c
         src/world.c)
 
+set(FLECS_TARGETS "")
+
 # build the shared library
+if(FLECS_SHARED_LIBS)
+    add_library(flecs SHARED ${INC} ${SRC})
+    add_library(flecs::flecs ALIAS flecs)
 
-add_library(flecs SHARED ${INC} ${SRC})
+    target_default_compile_options_c(flecs)
+    if(FLECS_DEVELOPER_WARNINGS)
+        target_default_compile_warnings_c(flecs)
+    endif()
 
-target_default_compile_options_c(flecs)
-target_default_compile_warnings_c(flecs)
+    target_include_directories(flecs PUBLIC
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+        $<INSTALL_INTERFACE:include>)
 
-target_include_directories(flecs PUBLIC include)
+    list(APPEND FLECS_TARGETS flecs)
+endif()
 
 # build the static library
+if(FLECS_STATIC_LIBS)
+    add_library(flecs_static STATIC ${INC} ${SRC})
+    add_library(flecs::flecs_static ALIAS flecs_static)
 
-add_library(flecs_static STATIC ${INC} ${SRC})
+    target_default_compile_options_c(flecs_static)
+    if(FLECS_DEVELOPER_WARNINGS)
+        target_default_compile_warnings_c(flecs_static)
+    endif()
 
-target_default_compile_options_c(flecs_static)
-target_default_compile_warnings_c(flecs_static)
+    if(FLECS_PIC)
+        set_property(TARGET flecs_static PROPERTY POSITION_INDEPENDENT_CODE ON)
+    endif()
 
-target_include_directories(flecs_static PUBLIC include)
-target_compile_definitions(flecs_static PUBLIC flecs_STATIC)
+    target_include_directories(flecs_static PUBLIC
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+        $<INSTALL_INTERFACE:include>)
+    target_compile_definitions(flecs_static PUBLIC flecs_STATIC)
 
-# define the install steps
+    list(APPEND FLECS_TARGETS flecs_static)
+endif()
 
+# define the install steps
+include(GNUInstallDirs)
 install(DIRECTORY "${PROJECT_SOURCE_DIR}/include/"
-        DESTINATION include
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
         FILES_MATCHING
         PATTERN "*.h"
         PATTERN "*.hpp")
 
-install(TARGETS flecs
-        DESTINATION lib)
+install(TARGETS ${FLECS_TARGETS}
+        EXPORT flecs-export
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
 
-install(TARGETS flecs_static
-        DESTINATION lib)
+install(EXPORT flecs-export
+        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/flecs
+        NAMESPACE flecs::
+        FILE flecs-config.cmake)
--- a/cmake/target_default_compile_options.cmake
+++ b/cmake/target_default_compile_options.cmake
@@ -1,20 +1,3 @@
-cmake_minimum_required(VERSION 3.5)
-
-# do not rely on cmake presets
-# and use target configuration
-
-set(CMAKE_C_FLAGS "")
-set(CMAKE_C_FLAGS_DEBUG "")
-set(CMAKE_C_FLAGS_RELEASE "")
-set(CMAKE_C_FLAGS_RELWITHDEBINFO "")
-set(CMAKE_C_FLAGS_MINSIZEREL "")
-
-set(CMAKE_CXX_FLAGS "")
-set(CMAKE_CXX_FLAGS_DEBUG "")
-set(CMAKE_CXX_FLAGS_RELEASE "")
-set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "")
-set(CMAKE_CXX_FLAGS_MINSIZEREL "")
-
 # this seems redundant as the target
 # property is set. but for apple clang
 # this seems to be needed
@@ -30,36 +13,8 @@ function(target_default_compile_options_c THIS)
     set_target_properties(${THIS} PROPERTIES
             LINKER_LANGUAGE C
             C_STANDARD 99
-            C_STANDARD_REQUIRED ON)
-
-    if (CMAKE_C_COMPILER_ID STREQUAL "Clang"
-            OR CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang"
-            OR CMAKE_C_COMPILER_ID STREQUAL "GNU")
-
-        target_compile_options(${THIS} PRIVATE
-                -fPIC
-                -fvisibility=hidden
-                -fno-stack-protector
-                $<$<CONFIG:DEBUG>:-g -O0 -DDEBUG>
-                $<$<CONFIG:RELEASE>:-O3 -DNDEBUG>
-                $<$<CONFIG:RELWITHDEBINFO>:-g -O2 -DNDEBUG>
-                $<$<CONFIG:MINSIZEREL>:-Os -DNDEBUG>)
-
-    elseif (CMAKE_C_COMPILER_ID STREQUAL "MSVC")
-
-        target_compile_options(${THIS} PRIVATE
-                $<$<CONFIG:DEBUG>:/Zi /Od /Ob0 /RTC1>
-                $<$<CONFIG:RELEASE>:/O2 /Ob2 /DNDEBUG>
-                $<$<CONFIG:RELWITHDEBINFO>:/Zi /O2 /Ob1 /DNDEBUG>
-                $<$<CONFIG:MINSIZEREL>:/O1 /Ob1 /DNDEBUG>)
-
-    else ()
-
-        message(WARNING
-                "No Options specified for ${CMAKE_C_COMPILER_ID}. "
-                "Consider using one of the following compilers: Clang, GNU, MSVC, AppleClang.")
-
-    endif ()
+            C_STANDARD_REQUIRED ON
+            C_VISIBILITY_PRESET hidden)
 
 endfunction()
 
@@ -70,33 +25,4 @@ function(target_default_compile_options_cxx THIS)
             CXX_STANDARD 11
             CXX_STANDARD_REQUIRED ON)
 
-    if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang"
-            OR CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang"
-            OR CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
-
-        target_compile_options(${THIS} PRIVATE
-                -fPIC
-                -fvisibility=hidden
-                -fno-stack-protector
-                $<$<CONFIG:DEBUG>:-g -O0 -DDEBUG>
-                $<$<CONFIG:RELEASE>:-O3 -DNDEBUG>
-                $<$<CONFIG:RELWITHDEBINFO>:-g -O2 -DNDEBUG>
-                $<$<CONFIG:MINSIZEREL>:-Os -DNDEBUG>)
-
-    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
-
-        target_compile_options(${THIS} PRIVATE
-                $<$<CONFIG:DEBUG>:/Zi /Od /Ob0 /RTC1>
-                $<$<CONFIG:RELEASE>:/O2 /Ob2 /DNDEBUG>
-                $<$<CONFIG:RELWITHDEBINFO>:/Zi /O2 /Ob1 /DNDEBUG>
-                $<$<CONFIG:MINSIZEREL>:/O1 /Ob1 /DNDEBUG>)
-
-    else ()
-
-        message(WARNING
-                "No Options specified for ${CMAKE_CXX_COMPILER_ID}. "
-                "Consider using one of the following compilers: Clang, GNU, MSVC, AppleClang.")
-
-    endif ()
-
 endfunction()
